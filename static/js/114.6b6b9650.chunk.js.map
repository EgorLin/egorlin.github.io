{"version":3,"file":"static/js/114.6b6b9650.chunk.js","mappings":"2IACA,OAAgB,UAAY,yBAAyB,MAAQ,qBAAqB,MAAQ,qBAAqB,WAAa,2B,SCgE5H,MAjDA,SAAe,GAUW,IATxBA,EAAS,EAATA,UACAC,EAAW,EAAXA,YACAC,EAAI,EAAJA,KACAC,EAAS,EAATA,UACAC,EAAK,EAALA,MACAC,EAAM,EAANA,OACAC,EAAO,EAAPA,QACAC,EAAM,EAANA,OACAC,EAAW,EAAXA,YAEMC,EAAY,GAClB,IAAK,IAAMC,KAASL,EAAQ,CAC1B,IAAMM,EAAUN,EAAOK,GACnBC,GACFF,EAAUG,MACR,gBAAiBZ,UAAWa,EAAAA,MAAa,SACtCF,GADOD,GAIhB,CAUA,OACE,iBAAKV,UAAWa,EAAAA,UAAiB,UAC9BP,IAAW,yBAAMG,EAAU,MAC5B,kBACEL,MAAOA,EACPU,SAAU,SAACC,GAAC,OAblB,SAAsBA,GAChBZ,EACFK,EAAYO,EAAEC,OAAOZ,MAAOD,GAE5BK,EAAYO,EAAEC,OAAOZ,MAEzB,CAOuBa,CAAaF,EAAE,EAChCd,YAAaA,EACbM,OAAQA,EACRP,UAAW,CACTa,EAAAA,MACAJ,EAAUS,OAAS,GAAKZ,EAAUO,EAAAA,WAAoB,GACtDb,GACAmB,KAAK,KACPjB,KAAMA,MAId,C,inTC9DA,GAAgB,KAAO,oB,SCqBvB,MAZA,SAAc,GAAsC,IAApCF,EAAS,EAATA,UACd,OACE,SAAC,KAAI,CAACoB,GAAIC,EAAAA,GAAAA,KAAgB,UACxB,gBACErB,UAAW,CAACa,EAAAA,KAAab,GAAWmB,KAAK,KACzCG,IAAKC,EACLC,IAAI,oBAIZ,C,kHClBYC,EAAU,SAAVA,GAAU,OAAVA,EAAU,oBAAVA,EAAU,cAAVA,EAAU,qBAAVA,EAAU,mCAAVA,EAAU,2BAAVA,EAAU,iCAAVA,CAAU,MASVC,EAAe,SAAfA,GAAe,OAAfA,EAAe,sBAAfA,EAAe,sBAAfA,EAAe,sBAAfA,EAAe,oBAAfA,EAAe,mCAAfA,EAAe,sBAAfA,CAAe,MAgDpB,SAASC,EAAcC,GAC5B,OAAkCC,EAAAA,EAAAA,UA8ClC,SAA0BD,GACxB,IAAME,EAASF,EAAOE,OAAOC,KAAI,SAACC,GAChC,IAAM3B,EAkEV,SAAyB2B,GACvB,IAAM3B,EAAS,CAAC,EAChB,IAAK,IAAMK,KAASsB,EACJ,SAAVtB,GAEJuB,OAAOC,eAAe7B,EAAQK,EAAO,CACnCyB,YAAY,EACZC,UAAU,EACVhC,MAAO,KAKX,OADAiC,EAAchC,EAAQ2B,EAAO,IACtB3B,CACT,CAhFmBiC,CAAgBN,GAE3B9B,EAAO,GACX,OAAQ8B,EAAM9B,MACZ,KAAKuB,EAAWc,iBAChB,KAAKd,EAAWe,aAChB,KAAKf,EAAWgB,gBACdvC,EAAO,WACP,MACF,KAAKuB,EAAWiB,UACdxC,EAAO,OACP,MACF,QACEA,EAAO8B,EAAM9B,KAGjB,IAQM4B,EAAiB,CACrB5B,KAAAA,EACAD,YAVkB+B,EAAM9B,KAEvByC,QAAQ,WAAY,OAEpBA,QAAQ,MAAM,SAASC,GACtB,OAAOA,EAAIC,aACb,IAKAxC,OAAAA,EACAF,UAAW6B,EAAM9B,KACjBE,MAAO,GACPE,SAAS,EACTC,OAAQ,kBAAMA,EAAOuC,KAAKhB,EAAO,EACjCiB,sBAAuB,sCAAIC,EAAI,yBAAJA,EAAI,uBAC7BD,EAAsBD,KAAI,MAA1BC,EAAqB,CAAMjB,GAAM,OAAKkB,GAAK,GAG/C,OAAOlB,CACT,IAEMmB,EAAc,CAClBnB,OAAAA,EACAoB,SAAUtB,EAAOsB,UAEnB,OAAOD,CACT,CA5FkDE,CAAiBvB,IAAQ,eAApEwB,EAAS,KAAEC,EAAY,KAExBvC,GAAWwC,EAAAA,EAAAA,cACf,SAACC,EAAkBrD,GACjB,IAAMsD,EAA8B,CAAC,EAC/BC,EAAkB7B,EAAOE,OAAO4B,MACpC,SAAC1B,GAAK,OAAKA,EAAM9B,OAASA,CAAI,IAEhC,GAAIuD,EACF,GAAIvD,IAASuB,EAAWgB,gBAAiB,CAAC,IAAD,EACjCkB,EAEL,QAFkB,EAAGP,EAAUtB,OAAO4B,MACrC,SAAC1B,GAAK,OAAKA,EAAM7B,YAAcsB,EAAWe,YAAY,WACvD,aAFqB,EAEnBpC,MACHiC,EACEmB,EACAC,EACAF,EACAI,EAEJ,MACEtB,EAAcmB,EAAeC,EAAiBF,GAIlDF,GAAa,SAACO,GACZ,IAAMC,EAAYD,EAAQ9B,OAAOC,KAAI,SAACkB,GACpC,OAAIA,EAAK9C,YAAcD,GACd,kBACF+C,GAAI,IACP7C,MAAOmD,EACPlD,OAAQyD,KAAKC,MAAMD,KAAKE,UAAUR,MAG/BP,CACT,IAIA,OAFa,kBAAQW,GAAO,IAAE9B,OAAQ+B,GAGxC,GACF,GACA,CAACT,EAAUtB,SAGb,MAAO,CAAEsB,UAAAA,EAAWtC,SAAAA,GAkDpB,SAASP,IAAsB,IAAD,OACvB0D,KAAK3D,SACR+C,GAAa,SAACO,GACZ,IAAMC,EAAYD,EAAQ9B,OAAOC,KAAI,SAACkB,GACpC,OAAIA,EAAK/C,OAAS,EAAKA,MACd,kBACF+C,GAAI,IACP3C,SAAS,IAGN2C,CACT,IAIA,OAFa,kBAAQW,GAAO,IAAE9B,OAAQ+B,GAGxC,GAEJ,CAkBA,SAASxB,EACP6B,EACAC,EACAZ,EACAa,GACC,IAAD,MACA,IAAK,IAAMC,KAAQF,EACjB,OAAQE,GACN,KAAK3C,EAAgB4C,SACnB,IAAMC,EAAahB,EACnBtB,OAAOC,eAAegC,EAAaxC,EAAgB4C,SAAU,CAC3DnC,YAAY,EACZ/B,MAAOmE,EAAa,GAAK,mBAE3B,MACF,KAAK7C,EAAgB8C,UACnB,IAAMC,GAAiC,QAAZ,EAACN,EAAME,UAAK,QAAI,IAAMd,EAASrC,OAC1De,OAAOC,eAAegC,EAAaxC,EAAgB8C,UAAW,CAC5DrC,YAAY,EACZ/B,MAAOqE,EACH,GACA,gCAAkCN,EAAME,KAE9C,MACF,KAAK3C,EAAgBgD,UACnB,IAAMC,GAA8B,QAAZ,EAACR,EAAME,UAAK,QAAI,KAAOd,EAASrC,OACxDe,OAAOC,eAAegC,EAAaxC,EAAgBgD,UAAW,CAC5DvC,YAAY,EACZ/B,MAAOuE,EACH,GACA,iCAAmCR,EAAME,KAE/C,MACF,KAAK3C,EAAgBkD,iBACnB,IAAMC,EAAkBT,IAAoBb,EAC5CtB,OAAOC,eAAegC,EAAaxC,EAAgBkD,iBAAkB,CACnEzC,YAAY,EACZ/B,MAAOyE,EAAkB,GAAK,4BAEhC,MACF,KAAKnD,EAAgBoD,SACnB,IAAMC,EAAmB,QAAd,EAAGZ,EAAME,UAAK,aAAX,EAAaW,KAAKzB,GAChCtB,OAAOC,eAAegC,EAAaxC,EAAgBoD,SAAU,CAC3D3C,YAAY,EACZ/B,MAAO2E,EAAQ,GAAK,4BAK9B,CAEA,SAAShC,EAAoCpC,GAAkB,IAAD,OAC5D0C,GAAa,SAACO,GACZ,IAAMC,EAAYD,EAAQ9B,OAAOC,KAAI,SAACkB,GACpC,OAAIA,EAAK/C,OAAS,EAAKA,MACd,kBACF+C,GAAI,IACP5C,QAAO,kBAAM4C,EAAK5C,QAAM,IAAE4E,YAAatE,MAGpCsC,CACT,IAEA,OAAO,kBAAKW,GAAO,IAAE9B,OAAQ+B,GAC/B,GACF,CACF,C,2KC/PA,GAAgB,UAAY,0BAA0B,OAAS,uBAAuB,KAAO,qBAAqB,MAAQ,sBAAsB,SAAW,yBAAyB,OAAS,uBAAuB,OAAS,uBAAuB,eAAiB,+BAA+B,OAAS,wB,SC4D7S,MA/CA,SAAoB,GAIM,IAHxBT,EAAS,EAATA,UACA8B,EAAa,EAAbA,cACAC,EAAQ,EAARA,SAEMC,EAAShC,EAAUtB,OAAOC,KAAI,SAACsD,GAAK,OACxC,SAACC,EAAA,EAAK,CAEJtF,UAAWa,EAAAA,MACXZ,YAAaoF,EAAMpF,YACnBC,KAAMmF,EAAMnF,KACZC,UAAWkF,EAAMlF,UACjBC,MAAOiF,EAAMjF,MACbC,OAAQgF,EAAMhF,OACdC,QAAS+E,EAAM/E,QACfC,OAAQ8E,EAAM9E,OACdC,YAAa0E,GATRG,EAAMlF,UAUX,IAGJ,OACE,gBAAKH,UAAWa,EAAAA,UAAiB,UAC/B,iBAAKb,UAAWa,EAAAA,OAAc,WAC5B,SAAC0E,EAAA,EAAI,CAACvF,UAAWa,EAAAA,OAChBuE,GACD,mBACEpF,UAAW,CACTa,EAAAA,OACAsE,EAAWtE,EAAAA,eAAwBA,EAAAA,UACnCM,KAAK,KACPqE,QAAS,SAACzE,GAAC,OAAKqC,EAAUF,SAASnC,EAAE,EACrC0E,SAAUN,EAAS,SACpB,aAID,yBAAG,2BACwB,KACzB,SAAC,KAAI,CAAC/D,GAAIC,EAAAA,GAAAA,MAAkBrB,UAAWa,EAAAA,OAAc,SAAC,mBAOhE,EC2DA,MAzGA,WACE,IAAMe,EAAsB,CAC1BE,OAAQ,CACN,CACE5B,KAAMuB,EAAAA,GAAAA,SACNiE,YAAY,EACZC,UAAW,EACXC,UAAW,IAGb,CACE1F,KAAMuB,EAAAA,GAAAA,MACNiE,YAAY,EACZG,SAAU,mCACVD,UAAW,IAEb,CACE1F,KAAMuB,EAAAA,GAAAA,aACNiE,YAAY,EACZC,UAAW,EACXC,UAAW,IAEb,CACE1F,KAAMuB,EAAAA,GAAAA,gBACNiE,YAAY,EACZC,UAAW,EACXC,UAAW,GACXE,iBAAiB,IAGrB5C,SAAU,SAAuBnC,GAC/BA,EAAEgF,iBAEF,IAAMC,GAAOC,EAAAA,EAAAA,MACTC,GAAe,EACbC,EAAWlC,KAAKnC,OAAO4B,MAC3B,SAAC1B,GAAK,OAAKA,EAAM7B,YAAcsB,EAAAA,GAAAA,QAAmB,IAE9C2E,EAAQnC,KAAKnC,OAAO4B,MACxB,SAAC1B,GAAK,OAAKA,EAAM7B,YAAcsB,EAAAA,GAAAA,KAAgB,IAE3C4E,EAAWpC,KAAKnC,OAAO4B,MAC3B,SAAC1B,GAAK,OAAKA,EAAM7B,YAAcsB,EAAAA,GAAAA,YAAuB,KAGxD6E,EAAAA,EAAAA,IAA+BN,EAAMI,EAAOhG,MAAOiG,EAAUjG,OAC1DmG,KAAI,yCAAC,WAAOC,GAAc,4EAGqC,OAFxDC,EAAsB,GAE1B,6DAA6D,EAAD,OACxDC,EAAAA,EAAAA,WACJF,EAAeG,KAAKC,IACpBT,EAAU/F,MACVgG,EAAOhG,MACPqG,EALA,8DAOA,KAAD,sCACF,mDAXI,IAYJI,OAAM,SAACnG,GAEN,OADAwF,GAAe,EACPxF,EAAMoG,MACZ,IAAK,qBAEHV,EAAOrD,sBAAsB,mBAC7B,MACF,IAAK,4BACHqD,EAAOrD,sBAAsB,wBAC7B,MACF,IAAK,sBACHsD,EAAUtD,sBAAsB,sBAChC,MACF,QACEgE,QAAQC,IAAItG,EAAMoG,MAExB,IACCG,SAAQ,WACFf,GACHgB,EAAS7F,EAAAA,GAAAA,KAEb,GACJ,GAGF,GAAgCM,EAAAA,EAAAA,IAAcC,GAAtCwB,EAAS,EAATA,UAAWtC,EAAQ,EAARA,SACbqE,EAAW/B,EAAUtB,OAAOqF,MAAK,SAACnF,GACtC,cAAoBC,OAAOmF,QAAQpF,EAAM3B,QAAO,eAAE,CAEhD,GADgC,KADlB,KACW,GAEvB,OAAO,CAEX,CACA,OAAO,CACT,IAEM6G,GAAWG,EAAAA,EAAAA,MAEjB,OACE,SAAC,EAAU,CACTjE,UAAWA,EACX8B,cAAepE,EACfqE,SAAUA,GAGhB,C","sources":["webpack://anime-app/./src/components/UI/Input/Input.module.scss?c522","components/UI/Input/Input.tsx","webpack://anime-app/./src/components/UI/Logo/Logo.module.scss?e70d","components/UI/Logo/Logo.tsx","hooks/useInput.ts","webpack://anime-app/./src/pages/SignUp/SignUp.module.scss?e676","pages/SignUp/SignUpItem.tsx","pages/SignUp/SignUp.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Input_container__EfGkk\",\"input\":\"Input_input__xC1Gr\",\"error\":\"Input_error__unTgx\",\"errorColor\":\"Input_errorColor__H4gdb\"};","import { ChangeEvent, ReactElement } from \"react\";\nimport { IInputErrors } from \"../../../hooks/useInput\";\nimport styles from \"./Input.module.scss\";\n\ninterface IProps {\n  className?: string;\n  placeholder?: string;\n  inputType?: string;\n  type: string;\n  errors?: IInputErrors;\n  isDirty?: boolean;\n  onBlur?: () => void;\n  value: string;\n  changeValue: (value: string, type?: string) => void;\n}\n\nfunction Input({\n  className,\n  placeholder,\n  type,\n  inputType,\n  value,\n  errors,\n  isDirty,\n  onBlur,\n  changeValue,\n}: IProps): ReactElement {\n  const errorsArr = [];\n  for (const error in errors) {\n    const message = errors[error as keyof typeof errors];\n    if (message)\n      errorsArr.push(\n        <div key={error} className={styles.error}>\n          {message}\n        </div>\n      );\n  }\n\n  function handleChange(e: ChangeEvent<HTMLInputElement>) {\n    if (inputType) {\n      changeValue(e.target.value, inputType);\n    } else {\n      changeValue(e.target.value);\n    }\n  }\n\n  return (\n    <div className={styles.container}>\n      {isDirty && <div>{errorsArr[0]}</div>}\n      <input\n        value={value}\n        onChange={(e) => handleChange(e)}\n        placeholder={placeholder}\n        onBlur={onBlur}\n        className={[\n          styles.input,\n          errorsArr.length > 0 && isDirty ? styles.errorColor : \"\",\n          className,\n        ].join(\" \")}\n        type={type}\n      />\n    </div>\n  );\n}\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nexport default {\"logo\":\"Logo_logo__LvuXh\"};","import { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../../../assets/images/logo/logo.png\";\nimport { RouteNames } from \"../../../router\";\nimport styles from \"./Logo.module.scss\";\n\ninterface IProps {\n  className?: string;\n}\n\nfunction Logo({ className }: IProps): ReactElement {\n  return (\n    <Link to={RouteNames.HOME}>\n      <img\n        className={[styles.logo, className].join(\" \")}\n        src={logo}\n        alt=\"Anime fun logo\"\n      />\n    </Link>\n  );\n}\n\nexport default Logo;\n","import { MouseEvent, useCallback, useState } from \"react\";\n\nexport enum InputTypes {\n  USERNAME = \"username\",\n  EMAIL = \"email\",\n  IMAGE_URL = \"imageUrl\",\n  CURRENT_PASSWORD = \"currentPassword\",\n  NEW_PASSWORD = \"newPassword\",\n  REPEAT_PASSWORD = \"repeatPassword\",\n}\n\nexport enum InputErrorTypes {\n  REQUIRED = \"isRequired\",\n  MINLENGTH = \"minLength\",\n  MAXLENGTH = \"maxLength\",\n  TEMPLATE = \"template\",\n  RECHECK_PASSWORD = \"recheckPassword\",\n  WRONGDATA = \"wrongData\",\n}\n\ninterface IConfigField {\n  type: string;\n  isRequired?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  recheckPassword?: boolean;\n  template?: RegExp;\n}\n\nexport interface IInputErrors {\n  isRequired?: string;\n  minLength?: string;\n  maxLength?: string;\n  template?: string;\n  recheckPassword?: string;\n  customError?: string;\n}\n\nexport interface IInput {\n  inputType: string;\n  placeholder: string;\n  type: string;\n  isDirty: boolean;\n  value: string;\n  errors: IInputErrors;\n  onBlur: () => void;\n  addCustomErrorMessage: (value: string) => void;\n}\n\nexport interface IForm {\n  fields: IInput[];\n  onSubmit: (e: MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport interface IFormConfig {\n  fields: IConfigField[];\n  onSubmit: (...args: any[]) => void;\n}\n\nexport function useValidation(config: IFormConfig) {\n  const [inputData, setInputData] = useState<IForm>(initializeInputs(config));\n\n  const onChange = useCallback(\n    (newValue: string, type: string) => {\n      const errorMessages: IInputErrors = {};\n      const validationRules = config.fields.find(\n        (field) => field.type === type\n      );\n      if (validationRules) {\n        if (type === InputTypes.REPEAT_PASSWORD) {\n          const passwordValue = inputData.fields.find(\n            (field) => field.inputType === InputTypes.NEW_PASSWORD\n          )?.value;\n          validateInput(\n            errorMessages,\n            validationRules,\n            newValue,\n            passwordValue\n          );\n        } else {\n          validateInput(errorMessages, validationRules, newValue);\n        }\n      }\n\n      setInputData((oldData) => {\n        const newFields = oldData.fields.map((data) => {\n          if (data.inputType === type) {\n            return {\n              ...data,\n              value: newValue,\n              errors: JSON.parse(JSON.stringify(errorMessages)),\n            };\n          }\n          return data;\n        });\n\n        const newData = { ...oldData, fields: newFields };\n\n        return newData;\n      });\n    },\n    [inputData.fields]\n  );\n\n  return { inputData, onChange };\n\n  function initializeInputs(config: IFormConfig) {\n    const fields = config.fields.map((field) => {\n      const errors = getErrorsFields(field);\n\n      let type = \"\";\n      switch (field.type) {\n        case InputTypes.CURRENT_PASSWORD:\n        case InputTypes.NEW_PASSWORD:\n        case InputTypes.REPEAT_PASSWORD:\n          type = \"password\";\n          break;\n        case InputTypes.IMAGE_URL:\n          type = \"text\";\n          break;\n        default:\n          type = field.type;\n      }\n\n      const placeholder = field.type\n        // insert a space before all caps\n        .replace(/([A-Z])/g, \" $1\")\n        // uppercase the first character\n        .replace(/^./, function(str) {\n          return str.toUpperCase();\n        });\n\n      const fields: IInput = {\n        type,\n        placeholder,\n        errors,\n        inputType: field.type,\n        value: \"\",\n        isDirty: false,\n        onBlur: () => onBlur.call(fields),\n        addCustomErrorMessage: (...args) =>\n          addCustomErrorMessage.call(fields, ...args),\n      };\n\n      return fields;\n    });\n\n    const data: IForm = {\n      fields,\n      onSubmit: config.onSubmit,\n    };\n    return data;\n  }\n\n  function onBlur(this: IInput) {\n    if (!this.isDirty) {\n      setInputData((oldData) => {\n        const newFields = oldData.fields.map((data) => {\n          if (data.type === this.type) {\n            return {\n              ...data,\n              isDirty: true,\n            };\n          }\n          return data;\n        });\n\n        const newData = { ...oldData, fields: newFields };\n\n        return newData;\n      });\n    }\n  }\n\n  function getErrorsFields(field: IConfigField): IInputErrors {\n    const errors = {} as IInputErrors;\n    for (const error in field) {\n      if (error === \"type\") continue;\n\n      Object.defineProperty(errors, error, {\n        enumerable: true,\n        writable: true,\n        value: \"\",\n      });\n    }\n\n    validateInput(errors, field, \"\");\n    return errors;\n  }\n\n  function validateInput(\n    errorObject: IInputErrors,\n    rules: IConfigField,\n    newValue: string,\n    additionalValue?: string\n  ) {\n    for (const rule in rules) {\n      switch (rule) {\n        case InputErrorTypes.REQUIRED:\n          const isNotEmpty = newValue;\n          Object.defineProperty(errorObject, InputErrorTypes.REQUIRED, {\n            enumerable: true,\n            value: isNotEmpty ? \"\" : \"Input is empty\",\n          });\n          break;\n        case InputErrorTypes.MINLENGTH:\n          const isGreaterMinLength = (rules[rule] ?? 0) <= newValue.length;\n          Object.defineProperty(errorObject, InputErrorTypes.MINLENGTH, {\n            enumerable: true,\n            value: isGreaterMinLength\n              ? \"\"\n              : \"Value should be longer than: \" + rules[rule],\n          });\n          break;\n        case InputErrorTypes.MAXLENGTH:\n          const isLessMaxLength = (rules[rule] ?? 31) >= newValue.length;\n          Object.defineProperty(errorObject, InputErrorTypes.MAXLENGTH, {\n            enumerable: true,\n            value: isLessMaxLength\n              ? \"\"\n              : \"Value should be shorter than: \" + rules[rule],\n          });\n          break;\n        case InputErrorTypes.RECHECK_PASSWORD:\n          const isEqualPassword = additionalValue === newValue;\n          Object.defineProperty(errorObject, InputErrorTypes.RECHECK_PASSWORD, {\n            enumerable: true,\n            value: isEqualPassword ? \"\" : \"Passwords are not equal\",\n          });\n          break;\n        case InputErrorTypes.TEMPLATE:\n          const isFit = rules[rule]?.test(newValue);\n          Object.defineProperty(errorObject, InputErrorTypes.TEMPLATE, {\n            enumerable: true,\n            value: isFit ? \"\" : \"Wrong template to write\",\n          });\n          break;\n      }\n    }\n  }\n\n  function addCustomErrorMessage(this: IInput, message: string) {\n    setInputData((oldData) => {\n      const newFields = oldData.fields.map((data) => {\n        if (data.type === this.type) {\n          return {\n            ...data,\n            errors: { ...data.errors, customError: message },\n          };\n        }\n        return data;\n      });\n\n      return { ...oldData, fields: newFields };\n    });\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"SignUp_container__uXgMl\",\"window\":\"SignUp_window__+qYQ3\",\"logo\":\"SignUp_logo__1uFKQ\",\"input\":\"SignUp_input__tft6b\",\"error404\":\"SignUp_error404__eUaOg\",\"button\":\"SignUp_button__ASsxo\",\"select\":\"SignUp_select__L-7Cd\",\"disabledButton\":\"SignUp_disabledButton__+U7qn\",\"signUp\":\"SignUp_signUp__vaKI3\"};","import { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Logo from \"../../components/UI/Logo/Logo\";\nimport { IForm } from \"../../hooks/useInput\";\nimport { RouteNames } from \"../../router\";\nimport styles from \"./SignUp.module.scss\";\n\ninterface IProps {\n  inputData: IForm;\n  onInputChange: (...args: any[]) => void;\n  hasError: boolean;\n}\n\nfunction SignUpItem({\n  inputData,\n  onInputChange,\n  hasError,\n}: IProps): ReactElement {\n  const inputs = inputData.fields.map((input) => (\n    <Input\n      key={input.inputType}\n      className={styles.input}\n      placeholder={input.placeholder}\n      type={input.type}\n      inputType={input.inputType}\n      value={input.value}\n      errors={input.errors}\n      isDirty={input.isDirty}\n      onBlur={input.onBlur}\n      changeValue={onInputChange}\n    />\n  ));\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.window}>\n        <Logo className={styles.logo} />\n        {inputs}\n        <button\n          className={[\n            styles.button,\n            hasError ? styles.disabledButton : styles.selected,\n          ].join(\" \")}\n          onClick={(e) => inputData.onSubmit(e)}\n          disabled={hasError}\n        >\n          Sign up\n        </button>\n\n        <p>\n          Already have an account?{\" \"}\n          <Link to={RouteNames.LOGIN} className={styles.signUp}>\n            Log in!\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default SignUpItem;\n","import { createUserWithEmailAndPassword, getAuth } from \"firebase/auth\";\nimport { ReactElement } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport FirebaseService from \"../../api/FirebaseService\";\nimport {\n  IForm,\n  IFormConfig,\n  InputTypes,\n  useValidation,\n} from \"../../hooks/useInput\";\nimport { RouteNames } from \"../../router\";\nimport SignUpItem from \"./SignUpItem\";\n\nfunction SignUp(): ReactElement {\n  const config: IFormConfig = {\n    fields: [\n      {\n        type: InputTypes.USERNAME,\n        isRequired: true,\n        minLength: 4,\n        maxLength: 16,\n      },\n\n      {\n        type: InputTypes.EMAIL,\n        isRequired: true,\n        template: /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\n        maxLength: 32,\n      },\n      {\n        type: InputTypes.NEW_PASSWORD,\n        isRequired: true,\n        minLength: 6,\n        maxLength: 16,\n      },\n      {\n        type: InputTypes.REPEAT_PASSWORD,\n        isRequired: true,\n        minLength: 6,\n        maxLength: 16,\n        recheckPassword: true,\n      },\n    ],\n    onSubmit: function (this: IForm, e) {\n      e.preventDefault();\n\n      const auth = getAuth();\n      let isErrorExist = false;\n      const username = this.fields.find(\n        (field) => field.inputType === InputTypes.USERNAME\n      );\n      const email = this.fields.find(\n        (field) => field.inputType === InputTypes.EMAIL\n      );\n      const password = this.fields.find(\n        (field) => field.inputType === InputTypes.NEW_PASSWORD\n      );\n\n      createUserWithEmailAndPassword(auth, email!.value, password!.value)\n        .then(async (userCredential) => {\n          const favorites: string[] = [];\n          const imageUrl: string =\n            \"https://www.pinta-ural.com/userFiles/image/sotrudnik_1.png\";\n          await FirebaseService.addNewUser(\n            userCredential.user.uid,\n            username!.value,\n            email!.value,\n            favorites,\n            imageUrl\n          );\n        })\n        .catch((error) => {\n          isErrorExist = true;\n          switch (error.code) {\n            case \"auth/invalid-email\":\n              // case \"auth/user-not-found\":\n              email!.addCustomErrorMessage(\"Incorrect email\");\n              break;\n            case \"auth/email-already-in-use\":\n              email!.addCustomErrorMessage(\"Email already in use\");\n              break;\n            case \"auth/wrong-password\":\n              password!.addCustomErrorMessage(\"Incorrect password\");\n              break;\n            default:\n              console.log(error.code);\n          }\n        })\n        .finally(() => {\n          if (!isErrorExist) {\n            navigate(RouteNames.HOME);\n          }\n        });\n    },\n  };\n\n  const { inputData, onChange } = useValidation(config);\n  const hasError = inputData.fields.some((field) => {\n    for (const error of Object.entries(field.errors)) {\n      const isNotEmpty = error[1] !== \"\";\n      if (isNotEmpty) {\n        return true;\n      }\n    }\n    return false;\n  });\n\n  const navigate = useNavigate();\n\n  return (\n    <SignUpItem\n      inputData={inputData}\n      onInputChange={onChange}\n      hasError={hasError}\n    />\n  );\n}\n\nexport default SignUp;\n"],"names":["className","placeholder","type","inputType","value","errors","isDirty","onBlur","changeValue","errorsArr","error","message","push","styles","onChange","e","target","handleChange","length","join","to","RouteNames","src","logo","alt","InputTypes","InputErrorTypes","useValidation","config","useState","fields","map","field","Object","defineProperty","enumerable","writable","validateInput","getErrorsFields","CURRENT_PASSWORD","NEW_PASSWORD","REPEAT_PASSWORD","IMAGE_URL","replace","str","toUpperCase","call","addCustomErrorMessage","args","data","onSubmit","initializeInputs","inputData","setInputData","useCallback","newValue","errorMessages","validationRules","find","passwordValue","oldData","newFields","JSON","parse","stringify","this","errorObject","rules","additionalValue","rule","REQUIRED","isNotEmpty","MINLENGTH","isGreaterMinLength","MAXLENGTH","isLessMaxLength","RECHECK_PASSWORD","isEqualPassword","TEMPLATE","isFit","test","customError","onInputChange","hasError","inputs","input","Input","Logo","onClick","disabled","isRequired","minLength","maxLength","template","recheckPassword","preventDefault","auth","getAuth","isErrorExist","username","email","password","createUserWithEmailAndPassword","then","userCredential","favorites","FirebaseService","user","uid","catch","code","console","log","finally","navigate","some","entries","useNavigate"],"sourceRoot":""}